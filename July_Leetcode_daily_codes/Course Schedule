C++

class Solution {
public:
   bool detectcycle(vector<vector<int>>&v,int src,vector<int>&rst,vector<int>&vis){
        vis[src]=1;
        rst[src]=1;
        for(auto x:v[src]){
            if(!vis[x]&&detectcycle(v,x,rst,vis)){
                return true;
            }
            else if(rst[x]==1)
            return true;
        }
        rst[src]=0;
        return false;
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>>v(numCourses);
        stack<int>s;
        vector<int>vis(numCourses),rst(numCourses);
        for(auto x: prerequisites){
            v[x[1]].push_back(x[0]);
        }
        for(int i=0;i<numCourses;i++){
           if(!vis[i])
           if(detectcycle(v,i,rst,vis))
           return false;
        }
       
        return true;
    }
};
JAVA

class Solution {
    public boolean detectCycle(List<List<Integer>> v, int src, int[] rst, int[] vis) {
        vis[src] = 1;
        rst[src] = 1;
        for (int x : v.get(src)) {
            if (vis[x] == 0 && detectCycle(v, x, rst, vis)) {
                return true;
            } else if (rst[x] == 1) {
                return true;
            }
        }
        rst[src] = 0;
        return false;
    }

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> v = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            v.add(new ArrayList<>());
        }
        Stack<Integer> s = new Stack<>();
        int[] vis = new int[numCourses];
        int[] rst = new int[numCourses];
        for (int[] x : prerequisites) {
            v.get(x[1]).add(x[0]);
        }
        for (int i = 0; i < numCourses; i++) {
            if (vis[i] == 0 && detectCycle(v, i, rst, vis)) {
                return false;
            }
        }
        return true;
    }
}

Python
class Solution:
    def detectCycle(self, v, src, rst, vis):
        vis[src] = 1
        rst[src] = 1
        for x in v[src]:
            if vis[x] == 0 and self.detectCycle(v, x, rst, vis):
                return True
            elif rst[x] == 1:
                return True
        rst[src] = 0
        return False

    def canFinish(self, numCourses, prerequisites):
        v = [[] for _ in range(numCourses)]
        vis = [0] * numCourses
        rst = [0] * numCourses
        for x in prerequisites:
            v[x[1]].append(x[0])
        for i in range(numCourses):
            if vis[i] == 0 and self.detectCycle(v, i, rst, vis):
                return False
        return True
